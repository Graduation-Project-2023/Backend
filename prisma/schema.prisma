generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  role     ROLE
  student  Student?

  @@map("users")
}

model Student {
  id                             String    @id @default(uuid())
  userId                         String    @unique
  address                        String?
  arabicName                     String?
  birthDate                      DateTime?
  birthPlace                     String?
  contactPhone                   String?
  englishName                    String?
  gender                         GENDER?
  guardianName                   String?
  homePhone                      String?
  nationalId                     String    @unique
  nationality                    String?
  religion                       RELIGION?
  collegeId                      String?
  programId                      String?
  InstitutePreviousQualification String?
  PreviousQualification          String?
  SeatId                         Int?      @unique @default(autoincrement())
  TotalPreviousQualification     String?
  collegeCode                    String?
  directorate                    String?
  enrollmentYear                 DateTime?
  schoolMarks                    String?
  schoolSeatId                   String?
  college                        College?  @relation(fields: [collegeId], references: [id])
  Program                        Program?  @relation(fields: [programId], references: [id])
  user                           User      @relation(fields: [userId], references: [id])

  @@map("students")
}

model College {
  id          String    @id @default(uuid())
  englishName String
  arabicName  String
  courses     Course[]
  programs    Program[]
  students    Student[]

  @@map("colleges")
}

model Course {
  englishName        String
  arabicName         String
  arabicDescription  String?
  collegeId          String?
  englishDescription String?
  id         String          @id
  college            College?        @relation(fields: [collegeId], references: [id])
  programCourses     ProgramCourse[]

  @@map("courses")
}

model ProgramCourse {
  id                                                                String        @id @default(uuid())
  programId                                                          String
  semester                                                           SEMESTER?
  creditHours                                                        Int?
  minimumHrsToRegister                                               Int?
  courseType                                                         COURSETYPE
  classWork                                                          Int?
  finalExam                                                          Int?
  midTerm                                                            Int?
  oralPractical                                                      Int?
  attendance                                                         Int?
  arabicName                                                         String?
  code                                                               String
  englishName                                                        String?
  levelId                                                              String?
  course                                                             Course         @relation(fields: [code], references: [id], onDelete: Cascade)
  program                                                            Program        @relation(fields: [programId], references: [id], onDelete: Cascade)
  level                                                              Level?         @relation(fields: [levelId], references: [id])
  // prerequisites                                                      Prerequisite[] @relation("CoursePrerequisites")
  // unlocks Prerequisite[] @relation("unlocks")
  prerequisites ProgramCourse[] @relation("CoursePrerequisites")
  unlocks ProgramCourse[] @relation("CoursePrerequisites")

  @@map("program_courses")
}

// model Prerequisite {
//   programId                                                            String
//   courseCode                                                           String
//   prerequisiteCode                                                     String
//   prerequisiteCourse                                                   ProgramCourse @relation("unlocks", fields: [prerequisiteCode, programId], references: [code, programId], onDelete: Cascade)
//   course ProgramCourse @relation("CoursePrerequisites", fields: [courseCode, programId], references: [code, programId], onDelete: Cascade)

//   @@id([courseCode , prerequisiteCode])
//   @@map("prerequisites")
// }

model Level {
  id           String         @id @default(uuid())
  englishName   String
  arabicName    String
  programId     String
  level         Int          
  qualifyingHrs Int?
  program       Program         @relation(fields: [programId], references: [id])
  courses       ProgramCourse[]

  @@map("levels")
}

model Grade {
  id        String   @id @default(uuid())
  name       String
  startsFrom Int
  endsAt     Int
  equivalent String
  gpa        Float
  programId  String
  program    Program @relation(fields: [programId], references: [id])

  @@map("grades")
}

model Program {
  id                     String              @id @default(uuid())
  englishName            String
  arabicName             String
  collegeId              String
  programCode            String              @unique
  creditHours            Int?
  mandatoryHours         Int?
  optionalHours          Int?
  projectQualifyingHours Int?
  feesType               FEESTYPE
  summerFeesType         FEESTYPE
  allowedHrs             ALLOWEDHRS
  prerequisiteProgramId  String?
  gradeLowering          Int?
  attemptsToLowerGrade   Int?
  failureGrade           Int?
  degree                 DEGREE?
  hasSummerSemester      Boolean?
  system                 SYSTEM
  maxGrade               Int?
  college                College             @relation(fields: [collegeId], references: [id])
  prerequisiteProgram    Program?            @relation("prerequisites", fields: [prerequisiteProgramId], references: [id])
  gpaAllowedHrs          GpaAllowedHours[]
  grades                 Grade[]
  levelAllowedHrs        LevelAllowedHours[]
  levels                 Level[]
  courses                ProgramCourse[]
  unlocksPrograms        Program[]           @relation("prerequisites")
  students               Student[]

  @@map("programs")
}

model LevelAllowedHours {
  id         String   @id @default(uuid())
  programId  String?
  semester   SEMESTER
  level      Int
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@map("level_allowed_hours")
}

model GpaAllowedHours {
  id         String   @id @default(uuid())
  programId  String?
  fromGpa    Float
  toGpa      Float
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@map("gpa_allowed_hours")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

enum ROLE {
  ADMIN
  STUDENT
  PROFESSOR

  @@map("Role")
}

enum SEMESTER {
  FIRST
  SECOND
  SUMMER

  @@map("Semester")
}

enum RELIGION {
  MUSLIM
  CHRISTIAN

  @@map("Religion")
}

enum DEGREE {
  BACHELOR
  DIPLOMA

  @@map("Degree")
}

enum GENDER {
  MALE
  FEMALE

  @@map("Gender")
}

enum SYSTEM {
  CREDIT
  SCHOOLYEAR

  @@map("System")
}

enum ALLOWEDHRS {
  SEMESTER
  CUMULATIVE
  INCLUDESUMMER
  SEMESTERFIXED

  @@map("AllowedHrs")
}

enum FEESTYPE {
  YEARFIXED
  SEMESTERFIXED
  CREDITHOURS
  COURSES

  @@map("FeesType")
}

enum COURSETYPE {
  COMPULSORY
  ELECTIVE

  @@map("CourseType")
}
