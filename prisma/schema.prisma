generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  nationalId String?   @unique
  obtained Boolean    @default(false)
  role      ROLE
  student   Student?
  professor Professor?
  admin     Admin?

  @@map("users")
}

model Professor {
  id          String           @id @default(uuid())
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [id])
  englishName String
  arabicName  String
  title       String?
  position    POSITION         @default(permanent)
  collegeId   String
  college     College          @relation(fields: [collegeId], references: [id])
  courses     CourseInstance[]
  classes    Class[]
  questions   Question[]
  sheets      Sheet[]
  departmentId String?
  department Department? @relation(fields: [departmentId], references: [id])

  @@map("professors")
}

model Admin {
  id          String      @id @default(uuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  englishName String
  arabicName  String
  role        ROLE
  collegeId   String
  college     College     @relation(fields: [collegeId], references: [id])

  @@map("admins")
}

model Student {
  id                             String                  @id @default(uuid())
  //personal details
  arabicName                     String?
  englishName                    String?
  seatId                         Int?                    @unique @default(autoincrement())
  gender                         GENDER?
  religion                       RELIGION?
  birthDate                      DateTime?
  birthPlace                     String?
  nationalId                     String                  @unique
  nationality                    String?
  maritalStatus                  MARITALSTATUS?
  otherNationality               String?
  // Contact details
  address                        String?
  contactPhone                   String?
  homePhone                      String?
  // Family details
  guardianName                   String?
  guardianAddress                String?
  guardianNationality            String?
  guardianPhone                  String?
  // academic details
  institutePreviousQualification String?
  previousQualification          String?
  totalPreviousQualification     String?
  schoolMarks                    String?
  schoolSeatId                   String?
  // Army details
  recruitmentState               String?
  armyNumber                     String?
  recruitmentNumber              String?
  recruitmentDate                DateTime?
  enrollmentYear                 DateTime?
  enrollmentYearEndDate          DateTime?
  reserveEndDate                 DateTime?
  // Other details
  collegeId                      String?
  programId                      String?
  levelId                        String?
  directorate                    String?
  collegeCode                    String?
  tableId                        String?
  // _________________________
  tables                         StudentTable[]
  college                        College?                @relation(fields: [collegeId], references: [id])
  Program                        Program?                @relation(fields: [programId], references: [id])
  user                           User                    @relation(fields: [nationalId], references: [nationalId])
  enrollmentSemester             AcademicSemester?       @relation(fields: [enrollmentSemesterId], references: [id], name: "enrollmentSemester")
  enrollmentSemesterId           String?
  courses                        StudentCourseInstance[]
  level                          Level?                  @relation(fields: [levelId], references: [id])
  instances                      SheetInstance[]
  // _________________________
  departmentCode                 String?
  department                     Department?             @relation(fields: [departmentCode], references: [code])
  creditHrs                      Int?
  availableCourses               AvailableCourse[]

  @@map("students")
}

model College {
  id          String      @id @default(uuid())
  englishName String
  arabicName  String
  courses     Course[]
  programs    Program[]
  students    Student[]
  professors  Professor[]
  admins      Admin[]
  departments Department[]

  @@map("colleges")
}

model Department {
  id         String      @id @default(uuid())
  code       String?      @unique
  englishName String
  arabicName  String
  collegeId   String
  system      SYSTEM
  college     College     @relation(fields: [collegeId], references: [id])
  programs    Program[]   @relation("department_programs") 
  professors  Professor[]
  students    Student[]

  @@map("departments")
}

model Course {
  englishName        String
  arabicName         String
  arabicDescription  String?
  collegeId          String?
  englishDescription String?
  id                 String          @id
  college            College?        @relation(fields: [collegeId], references: [id])
  programCourses     ProgramCourse[]
  bank               Bank?

  @@map("courses")
}

model ProgramCourse {
  id                   String           @id @default(uuid())
  programId            String
  semester             SEMESTER?
  creditHours          Int?
  minimumHrsToRegister Int?
  courseType           COURSETYPE
  classWork            Int?
  finalExam            Int?
  midTerm              Int?
  oralPractical        Int?
  attendance           Int?
  arabicName           String?
  code                 String
  englishName          String?
  levelId              String?
  course               Course           @relation(fields: [code], references: [id], onDelete: Cascade)
  availableCourses     AvailableCourse[]
  program              Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  level                Level?           @relation(fields: [levelId], references: [id])
  prerequisites        ProgramCourse[]  @relation("CoursePrerequisites")
  unlocks              ProgramCourse[]  @relation("CoursePrerequisites")
  instances            CourseInstance[]

  @@unique([programId, code])
  @@index([programId], type: Hash)
  @@map("program_courses")
}

model AvailableCourse {
  id       String           @id @default(uuid())
  programCourseId String
  studentId       String
  finished       Boolean?
  unlocked       Boolean?
  englishName    String?
  arabicName     String?
  code          String?
  levelId        String?
  level          Level?          @relation(fields: [levelId], references: [id])
  programCourse  ProgramCourse @relation(fields: [programCourseId], references: [id])
  student        Student       @relation(fields: [studentId], references: [id])

  @@unique([programCourseId, studentId])
  @@map("available_courses")
}

model StudentTable {
  id        String           @id @default(uuid())
  studentId String
  student   Student          @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  classes    Class[]
  instances StudentCourseInstance[]

  @@unique([studentId, academicSemesterId])
  @@map("student_tables")
}

model StudentCourseInstance {
  id                 String         @id @default(uuid())
  studentId          String
  instanceId         String
  student            Student        @relation(fields: [studentId], references: [id])
  instance           CourseInstance @relation(fields: [instanceId], references: [id])
  lectureGroup      GROUP?
  sectionGroup      GROUP?
  // normalized data from course instance
  finished           Boolean?
  midtermScore       Int?
  classworkScore     Int?
  finalScore         Int?
  gradeId            String?
  tableId            String?
  table              StudentTable?  @relation(fields: [tableId], references: [id])
  grade              Grade?         @relation(fields: [gradeId], references: [id])

  @@map("student_course_instances")
}

model CourseInstance {
  id                 String                  @id @default(uuid())
  lectureCount      Int?                    @default(1)
  lectureHrs        Int?                    @default(2)
  labCount          Int?                    @default(0)
  labHrs            Int?                    @default(0)
  sectionHrs        Int?                    @default(0)
  hasLectureGroups   Boolean?
  lectureGroupCount      Int?
  labGroupCount          Int?
  sectionGroupCount      Int?
  programCourseId           String 
  academicSemesterId         String
  professorId        String?
  // normalized data from program course
  levelId            String?
  code               String?
  programId          String?
  englishName        String?
  arabicName         String?
  creditHours        Int?
  level             Level?                   @relation(fields: [levelId], references: [id])
  programCourse      ProgramCourse           @relation(fields: [programCourseId], references: [id])
  program           Program?                 @relation(fields: [programId], references: [id])
  academicSemester   AcademicSemester        @relation(fields: [academicSemesterId], references: [id])
  professor          Professor?               @relation(fields: [professorId], references: [id])
  registeredStudents StudentCourseInstance[]
  classes            Class[]

  @@unique([programCourseId, academicSemesterId])
  @@index([levelId], type: Hash)
  @@map("course_instances")
}

model Class {
  id         String          @id @default(uuid())
  professorId String?
  tableId    String
  courseInstanceId String
  englishName String
  arabicName String
  classType  CLASSTYPE
  startPeriod Int
  endPeriod  Int
  day        DAY
  startDate  DateTime?
  endDate    DateTime? 
  studentTables StudentTable[]
  group     GROUP?
  table      ClassesTable    @relation(fields: [tableId], references: [id])
  courseInstance   CourseInstance @relation(fields: [courseInstanceId], references: [id])
  professor  Professor?      @relation(fields: [professorId], references: [id])


  @@index([tableId], type: Hash)
  @@map("classes")
}

model ClassesTable {
  id                    String                  @id @default(uuid())
  levelId               String
  semesterId            String
  programId             String
  program               Program                 @relation(fields: [programId], references: [id])
  level                 Level                   @relation(fields: [levelId], references: [id])
  academicSemester      AcademicSemester        @relation(fields: [semesterId], references: [id])
  classes               Class[]

  @@unique([levelId, semesterId])
  @@index([programId], type: Hash)
  @@map("course_tables")
}

model Level {
  id            String          @id @default(uuid())
  englishName   String
  arabicName    String
  programId     String
  level         Int
  qualifyingHrs Int?
  availableCourses AvailableCourse[]
  program       Program         @relation(fields: [programId], references: [id])
  courses       ProgramCourse[]
  courseInstances CourseInstance[]
  tables        ClassesTable[]
  students      Student[]

  @@unique([programId, level])
  @@map("levels")
}

model Grade {
  id           String                  @id @default(uuid())
  name         String
  startsFrom   Int
  endsAt       Int
  equivalent   String
  gpa          Float
  programId    String
  program      Program                 @relation(fields: [programId], references: [id])
  courseGrades StudentCourseInstance[]

  @@unique([programId, name])
  @@index([programId], type: Hash)
  @@map("grades")
}

model Program {
  id                     String              @id @default(uuid())
  englishName            String
  arabicName             String
  collegeId              String
  programCode            String              @unique
  creditHours            Int?
  mandatoryHours         Int?
  optionalHours          Int?
  projectQualifyingHours Int?
  periodLength           Int                 @default(1)
  feesType               FEESTYPE
  summerFeesType         FEESTYPE
  allowedHrs             ALLOWEDHRS
  prerequisiteProgramId  String?
  gradeLowering          Int?
  attemptsToLowerGrade   Int?
  failureGrade           Int?
  degree                 DEGREE?
  hasSummerSemester      Boolean?
  hrsToPass              Int?
  system                 SYSTEM
  maxGrade               Int?
  departments           Department[]         @relation("department_programs") 
  college                College             @relation(fields: [collegeId], references: [id])
  prerequisiteProgram    Program?            @relation("prerequisites", fields: [prerequisiteProgramId], references: [id])
  gpaAllowedHrs          GpaAllowedHours[]
  grades                 Grade[]
  levelAllowedHrs        LevelAllowedHours[]
  levels                 Level[]
  courses                ProgramCourse[]
  courseInstances        CourseInstance[]
  unlocksPrograms        Program[]           @relation("prerequisites")
  students               Student[]
  tables                 ClassesTable[]

  @@map("programs")
}

model LevelAllowedHours {
  id         String   @id @default(uuid())
  programId  String
  semester   SEMESTER
  level      Int
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@index([programId], type: Hash)
  @@map("level_allowed_hours")
}

model GpaAllowedHours {
  id         String   @id @default(uuid())
  programId  String?
  fromGpa    Float
  toGpa      Float
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@index([programId], type: Hash)
  @@map("gpa_allowed_hours")
}

model AcademicSemester {
  id               String           @id @default(uuid())
  academicYear     String
  semester         SEMESTER
  startDate        DateTime?
  endDate          DateTime?
  enrolledStudents Student[]        @relation("enrollmentSemester")
  courseInstances  CourseInstance[]
  tables           ClassesTable[]
  studentTables    StudentTable[]

  @@unique([academicYear, semester])
  @@map("academic_semesters")
}

model Bank {
  id        String     @id @unique
  englishName String
  arabicName  String
  questions   Question[]
  sheets      Sheet[]
  courseCode  Course     @relation(fields: [id], references: [id])

  @@map("banks")
}

model Question {
  id          String      @id @default(uuid())
  question    String
  choices     Json
  answer      String[]  //editeddddddddddd to be arr
  image       String?
  bankId      String
  addedBy     String
  lastEdit        DateTime    @default(now())
  sheet     Sheet[]
  bank        Bank        @relation(fields: [bankId], references: [id])
  professor   Professor   @relation(fields: [addedBy], references: [id])

  @@map("questions")
}

model Sheet {
  id          String      @id @default(uuid())
  englishName String
  arabicName  String?
  description String?
  bankId  String
  createdBy   String
  totalMarks  Float
  questions   Question[]
  instances   SheetInstance[]
  bank      Bank      @relation(fields: [bankId], references: [id])
  professor   Professor   @relation(fields: [createdBy], references: [id])

  @@map("sheets")
}

model SheetInstance {
  id          String      @id @default(uuid())
  sheetId     String
  studentId   String
  answers     Json
  marks       Float
  startTime   Float
  endTime     Float
  sheet       Sheet       @relation(fields: [sheetId], references: [id])
  student     Student     @relation(fields: [studentId], references: [id])

  @@map("sheet_instances")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

enum ROLE {
  ADMIN
  STUDENT
  PROFESSOR
  SUPER
  @@map("Role")
}

enum POSITION {
  delegated
  permanent
  @@map("Position")
}

enum SEMESTER {
  FIRST
  SECOND
  SUMMER

  @@map("Semester")
}

enum RELIGION {
  MUSLIM
  CHRISTIAN

  @@map("Religion")
}

enum DEGREE {
  BACHELOR
  DIPLOMA

  @@map("Degree")
}

enum GENDER {
  MALE
  FEMALE

  @@map("Gender")
}

enum MARITALSTATUS {
  SINGLE
  MARRIED
  DIVORCED
  SEPARATED
  WIDOWED

  @@map("MaritalStatus")
}

enum SYSTEM {
  CREDIT
  SCHOOLYEAR

  @@map("System")
}

enum ALLOWEDHRS {
  SEMESTER
  CUMULATIVE
  INCLUDESUMMER
  SEMESTERFIXED

  @@map("AllowedHrs")
}

enum FEESTYPE {
  YEARFIXED
  SEMESTERFIXED
  CREDITHOURS
  COURSES

  @@map("FeesType")
}

enum COURSETYPE {
  COMPULSORY
  ELECTIVE

  @@map("CourseType")
}

enum DAY {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY

  @@map("Day")
}

enum CLASSTYPE {
  LECTURE
  LAB
  SECTION

  @@map("ClassType")
}

enum GROUP {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L

  @@map("Group")  
}