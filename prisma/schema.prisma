generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      ROLE
  student   Student?
  professor Professor?

  @@map("users")
}

model Professor {
  id          String           @id @default(uuid())
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [id])
  englishName String
  arabicName  String
  collegeId   String
  college     College          @relation(fields: [collegeId], references: [id])
  courses     CourseInstance[]
  classes    Class[]

  @@map("professors")
}

model Student {
  id                             String                  @id @default(uuid())
  userId                         String                  @unique
  address                        String?
  arabicName                     String?
  birthDate                      DateTime?
  birthPlace                     String?
  contactPhone                   String?
  englishName                    String?
  gender                         GENDER?
  guardianName                   String?
  homePhone                      String?
  nationalId                     String                  @unique
  nationality                    String?
  religion                       RELIGION?
  collegeId                      String?
  programId                      String?
  InstitutePreviousQualification String?
  PreviousQualification          String?
  SeatId                         Int?                    @unique @default(autoincrement())
  TotalPreviousQualification     String?
  collegeCode                    String?
  directorate                    String?
  enrollmentYear                 DateTime?
  schoolMarks                    String?
  schoolSeatId                   String?
  college                        College?                @relation(fields: [collegeId], references: [id])
  Program                        Program?                @relation(fields: [programId], references: [id])
  user                           User                    @relation(fields: [userId], references: [id])
  enrollmentSemester             AcademicSemester?       @relation(fields: [enrollmentSemesterId], references: [id], name: "enrollmentSemester")
  enrollmentSemesterId           String?
  courses                        StudentCourseInstance[]
  studentTables                  StudentTable[]

  @@map("students")
}

model College {
  id          String      @id @default(uuid())
  englishName String
  arabicName  String
  courses     Course[]
  programs    Program[]
  students    Student[]
  professors  Professor[]

  @@map("colleges")
}

model Course {
  englishName        String
  arabicName         String
  arabicDescription  String?
  collegeId          String?
  englishDescription String?
  id                 String          @id
  college            College?        @relation(fields: [collegeId], references: [id])
  programCourses     ProgramCourse[]

  @@map("courses")
}

model ProgramCourse {
  id                   String           @id @default(uuid())
  programId            String
  semester             SEMESTER?
  creditHours          Int?
  minimumHrsToRegister Int?
  courseType           COURSETYPE
  classWork            Int?
  finalExam            Int?
  midTerm              Int?
  oralPractical        Int?
  attendance           Int?
  arabicName           String?
  code                 String
  englishName          String?
  levelId              String?
  course               Course           @relation(fields: [code], references: [id], onDelete: Cascade)
  program              Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  level                Level?           @relation(fields: [levelId], references: [id])
  prerequisites        ProgramCourse[]  @relation("CoursePrerequisites")
  unlocks              ProgramCourse[]  @relation("CoursePrerequisites")
  instances            CourseInstance[]

  @@unique([programId, code])
  @@index([programId], type: Hash)
  @@map("program_courses")
}

model StudentCourseInstance {
  id                 String         @id @default(uuid())
  studentId          String
  instanceId         String
  student            Student        @relation(fields: [studentId], references: [id])
  instance           CourseInstance @relation(fields: [instanceId], references: [id])
  // normalized data from course instance
  englishName        String?
  arabicName         String?
  lectureDay         DAY
  lectureStartPeriod Int
  lectureStartDate   DateTime
  lectureEndPeriod   Int
  sectionStartPeriod Int?
  sectionStartDate   DateTime?
  sectionEndPeriod   Int?
  tableId            String
  finished           Boolean
  midtermScore       Int?
  classworkScore     Int?
  finalScore         Int?
  gradeId            String?
  grade              Grade?         @relation(fields: [gradeId], references: [id])
  studentTable       StudentTable?  @relation(fields: [studentTableId], references: [id])
  studentTableId     String?

  @@unique([studentId, instanceId])
  @@map("student_course_instances")
}

model StudentTable {
  id               String                  @id @default(uuid())
  studentId        String
  levelId          String
  semesterId       String
  programId        String
  courses          StudentCourseInstance[]
  program          Program                 @relation(fields: [programId], references: [id])
  level            Level                   @relation(fields: [levelId], references: [id])
  academicSemester AcademicSemester        @relation(fields: [semesterId], references: [id])
  student          Student                 @relation(fields: [studentId], references: [id])

  @@unique([levelId, semesterId])
  @@index([programId], type: Hash)
  @@map("student_tables")
}

model CourseInstance {
  id                 String                  @id @default(uuid())
  lectureCount      Int?                    @default(1)
  lectureHrs        Int?                    @default(2)
  labCount          Int?                    @default(0)
  labHrs            Int?                    @default(0)
  programCourseId           String 
  academicSemesterId         String
  professorId        String?
  // normalized data from program course
  levelId            String?
  code               String?
  programId          String?
  englishName        String?
  arabicName         String?
  creditHours        Int?
  level             Level?                   @relation(fields: [levelId], references: [id])
  programCourse      ProgramCourse           @relation(fields: [programCourseId], references: [id])
  program           Program?                 @relation(fields: [programId], references: [id])
  academicSemester   AcademicSemester        @relation(fields: [academicSemesterId], references: [id])
  professor          Professor?               @relation(fields: [professorId], references: [id])
  registeredStudents StudentCourseInstance[]
  classes            Class[]

  @@unique([programCourseId, academicSemesterId])
  @@index([levelId], type: Hash)
  @@map("course_instances")
}

model Class {
  id         String          @id @default(uuid())
  professorId String?
  tableId    String
  courseInstanceId String
  englishName String
  arabicName String
  classType  CLASSTYPE
  startPeriod Int
  endPeriod  Int
  day        DAY
  startDate  DateTime?
  endDate    DateTime? 
  table      ClassesTable    @relation(fields: [tableId], references: [id])
  courseInstance   CourseInstance @relation(fields: [courseInstanceId], references: [id])
  professor  Professor?      @relation(fields: [professorId], references: [id])


  @@index([tableId], type: Hash)
  @@map("classes")
}

model ClassesTable {
  id                    String                  @id @default(uuid())
  levelId               String
  semesterId            String
  programId             String
  program               Program                 @relation(fields: [programId], references: [id])
  level                 Level                   @relation(fields: [levelId], references: [id])
  academicSemester      AcademicSemester        @relation(fields: [semesterId], references: [id])
  classes               Class[]

  @@unique([levelId, semesterId])
  @@index([programId], type: Hash)
  @@map("course_tables")
}

model Level {
  id            String          @id @default(uuid())
  englishName   String
  arabicName    String
  programId     String
  level         Int
  qualifyingHrs Int?
  program       Program         @relation(fields: [programId], references: [id])
  courses       ProgramCourse[]
  courseInstances CourseInstance[]
  tables        ClassesTable[]
  StudentTable  StudentTable[]

  @@unique([programId, level])
  @@map("levels")
}

model Grade {
  id           String                  @id @default(uuid())
  name         String
  startsFrom   Int
  endsAt       Int
  equivalent   String
  gpa          Float
  programId    String
  program      Program                 @relation(fields: [programId], references: [id])
  courseGrades StudentCourseInstance[]

  @@unique([programId, name])
  @@index([programId], type: Hash)
  @@map("grades")
}

model Program {
  id                     String              @id @default(uuid())
  englishName            String
  arabicName             String
  collegeId              String
  programCode            String              @unique
  creditHours            Int?
  mandatoryHours         Int?
  optionalHours          Int?
  projectQualifyingHours Int?
  periodLength           Int                 @default(1)
  feesType               FEESTYPE
  summerFeesType         FEESTYPE
  allowedHrs             ALLOWEDHRS
  prerequisiteProgramId  String?
  gradeLowering          Int?
  attemptsToLowerGrade   Int?
  failureGrade           Int?
  degree                 DEGREE?
  hasSummerSemester      Boolean?
  system                 SYSTEM
  maxGrade               Int?
  college                College             @relation(fields: [collegeId], references: [id])
  prerequisiteProgram    Program?            @relation("prerequisites", fields: [prerequisiteProgramId], references: [id])
  gpaAllowedHrs          GpaAllowedHours[]
  grades                 Grade[]
  levelAllowedHrs        LevelAllowedHours[]
  levels                 Level[]
  courses                ProgramCourse[]
  courseInstances        CourseInstance[]
  unlocksPrograms        Program[]           @relation("prerequisites")
  students               Student[]
  tables                 ClassesTable[]
  studentTables           StudentTable[]

  @@map("programs")
}

model LevelAllowedHours {
  id         String   @id @default(uuid())
  programId  String
  semester   SEMESTER
  level      Int
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@index([programId], type: Hash)
  @@map("level_allowed_hours")
}

model GpaAllowedHours {
  id         String   @id @default(uuid())
  programId  String?
  fromGpa    Float
  toGpa      Float
  minHours   Int
  maxHours   Int
  maxCourses Int?
  program    Program? @relation(fields: [programId], references: [id])

  @@index([programId], type: Hash)
  @@map("gpa_allowed_hours")
}

model AcademicSemester {
  id               String           @id @default(uuid())
  academicYear     String
  semester         SEMESTER
  startDate        DateTime?
  endDate          DateTime?
  enrolledStudents Student[]        @relation("enrollmentSemester")
  courseInstances  CourseInstance[]
  tables           ClassesTable[]
  studentTables     StudentTable[]

  @@unique([academicYear, semester])
  @@map("academic_semesters")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

enum ROLE {
  ADMIN
  STUDENT
  PROFESSOR

  @@map("Role")
}

enum SEMESTER {
  FIRST
  SECOND
  SUMMER

  @@map("Semester")
}

enum RELIGION {
  MUSLIM
  CHRISTIAN

  @@map("Religion")
}

enum DEGREE {
  BACHELOR
  DIPLOMA

  @@map("Degree")
}

enum GENDER {
  MALE
  FEMALE

  @@map("Gender")
}

enum SYSTEM {
  CREDIT
  SCHOOLYEAR

  @@map("System")
}

enum ALLOWEDHRS {
  SEMESTER
  CUMULATIVE
  INCLUDESUMMER
  SEMESTERFIXED

  @@map("AllowedHrs")
}

enum FEESTYPE {
  YEARFIXED
  SEMESTERFIXED
  CREDITHOURS
  COURSES

  @@map("FeesType")
}

enum COURSETYPE {
  COMPULSORY
  ELECTIVE

  @@map("CourseType")
}

enum DAY {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY

  @@map("Day")
}

enum CLASSTYPE {
  LECTURE
  LAB
  SECTION

  @@map("ClassType")
}