generator client {
    provider="prisma-client-js"
}

datasource db {
    provider="postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    ADMIN
    STUDENT
    PROFESSOR
	@@map("Role")
}

enum SEMESTER {
    FIRST
    SECOND
    SUMMER
	@@map("Semester")
}

enum RELIGION {
    MUSLIM
    CHRISTIAN
	@@map("Religion")
}

enum DEGREE {
    BACHELOR
    DIPLOMA
	@@map("Degree")
}

enum GENDER {
    MALE 
    FEMALE
	@@map("Gender")
}

enum SYSTEM {
    CREDIT
    SCHOOLYEAR
	@@map("System")
}

enum ALLOWEDHRS {
    SEMESTER 
    CUMULATIVE
    INCLUDESUMMER
	@@map("AllowedHrs")
}

enum FEESTYPE {
    YEARFIXED
    SEMESTERFIXED
    CREDITHOURS
    COURSES
	@@map("FeesType")
}

enum COURSETYPE {
    COMPULSORY
    ELECTIVE
	@@map("CourseType")
}

// models 
model User {
    id String @id @default(uuid())
    student Student?
    email String @unique
    password String
    role ROLE
    @@map("users")
}

model Student {
    id String @id @default(uuid())
    user User? @relation(fields: [userId], references: [id])
    userId String @unique
    Program Program? @relation(fields: [programId], references: [id])
    programId String?
    nationalId String @unique
    englishName String?
    arabicName String?
    nationality String?
    gender GENDER?
    religion RELIGION?
    birthDate DateTime?
    birthPlace String?
    guardianName String?
    address String?
    contactPhone String?
    homePhone String?
    SeatId Int?  @unique @default(autoincrement())
    enrollmentYear DateTime?
    PreviousQualification String?
    TotalPreviousQualification String?
    InstitutePreviousQualification String?
    schoolMarks String?
    schoolSeatId String?
    collegeCode String?
    directorate String?
    college College? @relation(fields: [collegeId], references: [id])
    collegeId String? 
    @@map("students") 
}

model College {
    id String @id @default(uuid())
    englishName String
    arabicName String
    students Student[]
    programs Program[]
    courses Course[]
    @@map("colleges")
}

model Course {
    id String @id @default(uuid())
    englishName String
    arabicName String
    code String @unique
    college College? @relation(fields: [collegeId], references: [id])
    collegeId String?
    arabicDescription String?
    englishDescription String?
    programCourses ProgramCourse[] @relation(name: "CoursePrograms")
    unlockedCourses ProgramCourse[] @relation(name: "PrerequisiteCourses")
    @@map("courses")
}
// program models

model ProgramCourse {
    id String @id @default(uuid())
    program Program @relation(fields: [programId], references: [id])
    programId String
    course Course? @relation(name: "CoursePrograms", fields: [courseId], references: [id])
    courseId String?
    Level Level? @relation(fields: [levelId], references: [id])
    levelId String?
    prerequisite Course? @relation(name: "PrerequisiteCourses", fields: [prerequisiteId], references: [id])
    prerequisiteId String?
    semester SEMESTER
    creditHours Int
    minimumHrsToRegister Int?
    courseType COURSETYPE
    classWork Int?
    finalExam Int?
    midTerm Int?
    oralPractical Int?
    attendance Int?
    @@map("program_courses")
}

model Level {
    id String @id @default(uuid())
    englishName String
    arabicName String
    program Program? @relation(fields: [programId], references: [id])
    programId String?
    level Int 
    qualifyingHrs Int?
    courses ProgramCourse[]
    @@map("levels")
}

model Grade {
    id String @id @default(uuid())
    name String
    startsFrom Int
    endsAt Int
    equivalent String
    gpa Float
    program Program? @relation(fields: [programId], references: [id])
    programId String?
    @@map("grades")
}

model Program {
    id String @id @default(uuid())
    englishName String
    arabicName String
    college College? @relation(fields: [collegeId], references: [id])
    students Student[]
    levels Level[]
    collegeId String
    programCode String @unique
    degree DEGREE?
    system SYSTEM
    creditHours Int?
    allowedHrs ALLOWEDHRS
    mandatoryHours Int?
    optionalHours Int?
    projectQualifyingHours Int?
    feesType FEESTYPE
    summerFeesType FEESTYPE
    prerequisiteProgram Program? @relation(name: "prerequisites", fields: [prerequisiteProgramId], references: [id])
    unlocksPrograms Program[] @relation(name: "prerequisites")
    prerequisiteProgramId String?
    levelAllowedHrs LevelAllowedHours[]
    gpaAllowedHrs GpaAllowedHours[]
    gradeLowering Int?
    attemptsToLowerGrade Int?
    failureGrade Int?
    hasSummerSemester Boolean?
    grades Grade[]
    courses ProgramCourse[]
    @@map("programs")
}

model LevelAllowedHours {
    id String @id @default(uuid())
    program Program? @relation(fields: [programId], references: [id])
    programId String?
    semester SEMESTER
    level Int
    levelId String
    minHours Int
    maxHours Int
    maxCourses Int?
    @@map("level_allowed_hours")
}

model GpaAllowedHours {
    id String @id @default(uuid())
    program Program? @relation(fields: [programId], references: [id])
    programId String?
    fromGpa Float
    toGpa Float
    minHours Int
    maxHours Int
    maxCourses Int?
    @@map("gpa_allowed_hours")
} 

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt   DateTime
    @@map("sessions")
}